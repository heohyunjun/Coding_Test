# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tdmS2sBvr2XtpjIwArKUHWt71Prqw6_a
"""

from collections import deque

# 돌 개수 n
n = int(input())

# 돌다리
bridge = list(map(int, input().split()))

# 현재 위치
start = int(input())

# 방문 확인
visited = [0] * n 

def bfs(start):

  # 3번째 시작이지만 인덱스는 0부터 시작
  start =  start-1
 
  q =deque()
  q.append(start)

  # 현재위치를 방문 처리  
  visited[start] = 1

  # 방문한 돌 갯수
  result =1

  while q:
    m = q.popleft()

    # 이동 가능 거리에서 좌, 우 둘다 갈 수 있음
    for k in [-bridge[m], bridge[m]]:
      nx = m + k

      # 이동거리가 범위 안이고 방문 안했으면 실행
      if 0<= nx < n and visited[nx] == 0:
        q.append(nx)
        result +=1
        visited[nx] = 1

  print(result)
bfs(start)

from collections import deque
n = int(input())
Ai = list(map(int, input().split()))
s = int(input())
visited = [0] * n

def bfs(s):
  visited[s] = 1
  q = deque()
  q.append(s)
  while q:
    x = q.popleft()
    nx = [x - Ai[x], x + Ai[x]]
    for i in nx:
      if 0<= i < n and visited[i] == 0:
        q.append(i)
        visited[i] = 1

  # 방문했던 곳(1의 개수) 리턴
  return visited.count(1)

print(bfs(s-1))